{"version":3,"sources":["components/header.jsx","constants/address.js","utils/interact.js","components/mint.jsx","containers/home.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Header","props","onClickConnectWallet","onClickDisconnectWallet","walletAddress","className","src","alt","onClick","slice","contractAddress","chainId","connectWallet","a","window","ethereum","request","method","chain","parseInt","addressArray","length","address","status","params","message","getCurrentWalletConnected","getContract","contract","contractABI","require","undefined","ethers","Contract","getDefaultProvider","signer","providers","Web3Provider","getSigner","error","Mint","loading","setStatus","setMintLoading","publicSalePrice","presaleStatus","publicSaleStatus","totalSupply","maxMintSupply","maxPresaleMints","useState","amount","setAmount","useEffect","handleMint","balanceOf","cn","nmint","_hex","console","log","mint","value","BigNumber","from","mul","tx","wait","res","transactionHash","errorContainer","errorBody","substr","indexOf","style","margin","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeMiterlimit","strokeLinecap","strokeLinejoin","disabled","Home","setWalletAddress","setPublicSalePrice","setTotalSupply","setPresaleStatus","setPublicSaleStatus","setMaxMintSupply","setMaxPresaleMints","fetchWalletInfo","isPresaleActive","isPublicSaleActive","Number","MAX_SUPPLY","MAX_PRESALE_MINTS","toNumber","PUBLIC_PRICE","toString","fetchContractInfo","notify","walletResponse","toast","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9c4ce268.chunk.js","sourcesContent":["\nexport const Header = (props) => {\n  // const navigate = useNavigate();\n  const { onClickConnectWallet, onClickDisconnectWallet, walletAddress } = props\n\n  return (\n    <header>\n      <div className=\"logo-header\">\n        <img className=\"left-bar\" src=\"img/header-right.png\" alt=\"Header\" />\n        <img className=\"logo\" src=\"img/logo.png\" alt=\"Header\" />\n        <img className=\"right-bar\" src=\"img/header-left.png\" alt=\"Header\" />\n      </div>\n      <div className=\"connect-wallet\">\n      {\n        walletAddress ? \n        <button className=\"mint-btn\" onClick={onClickDisconnectWallet}>\n          { walletAddress.slice(0, 11) }...\n        </button>\n        :\n        <button className=\"mint-btn\" onClick={onClickConnectWallet}>\n          Connect\n        </button>\n      }\n      </div>\n\n\n    </header>\n  );\n};\n\n","export const contractAddress = \"0x2eF7833174c4C0d51d2716e88779a01F4a397068\";\r\nexport const chainId = \"0x1\";\r\n","import { ethers } from \"ethers\";\nimport { contractAddress } from \"../constants/address\";\nimport { chainId } from \"../constants/address\";\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const chain = await window.ethereum.request({ method: \"eth_chainId\" });\n      if (parseInt(chain, 16) === parseInt(chainId, 16)) {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        if (addressArray.length > 0) {\n          return {\n            address: addressArray[0],\n            status: \"\",\n          };\n        } else {\n          return {\n            address: \"\",\n            status: \"Connect your wallet account to the site.\",\n          };\n        }\n      } else {\n        window.ethereum.request({\n          method: \"wallet_switchEthereumChain\",\n          params: [{ chainId: chainId }],\n        });\n        const addressArray = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        if (addressArray.length > 0) {\n          return {\n            address: addressArray[0],\n            status: \"\",\n          };\n        } else {\n          return {\n            address: \"\",\n            status: \"Connect your wallet account to the site.\",\n          };\n        }\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status:\n        \"You must install Metamask, a virtual Ethereum wallet, in your browser.\",\n    };\n  }\n};\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      const chain = await window.ethereum.request({\n        method: \"eth_chainId\",\n      });\n      if (addressArray.length > 0 && chain === chainId) {\n        return {\n          address: addressArray[0],\n          status: \"\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status:\n            \"Connect to Metamask and choose the correct chain using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status:\n        \"You must install Metamask, a virtual Ethereum wallet, in your browser.\",\n    };\n  }\n};\n\nexport const getContract = (walletAddress) => {\n  const contractABI = require(\"../constants/contract.json\");\n  let contract;\n\n  try {\n    if (\n      walletAddress === null ||\n      walletAddress === \"\" ||\n      walletAddress === undefined\n    ) {\n      if (parseInt(chainId, 16) === 4)\n        contract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          ethers.getDefaultProvider(\"rinkeby\")\n        );\n      if (parseInt(chainId, 16) === 1)\n        contract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          ethers.getDefaultProvider(\"mainnet\")\n        );\n    } else {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      contract = new ethers.Contract(contractAddress, contractABI, signer);\n    }\n  } catch (error) {\n    contract = null;\n  }\n  return contract;\n};\n","import { useState, useEffect } from 'react'\r\nimport { BigNumber } from 'ethers'\r\n//import { MerkleTree } from 'merkletreejs'\r\n//import keccak256 from 'keccak256'\r\nimport { getContract } from '../utils/interact'\r\n//import { whiteList } from '../constants/whitelist'\r\n\r\nexport const Mint = (props) => {\r\n  const {\r\n    loading,\r\n    walletAddress,\r\n    setStatus,\r\n    setMintLoading,\r\n    publicSalePrice,\r\n    presaleStatus,\r\n    publicSaleStatus,\r\n    totalSupply,\r\n    maxMintSupply,\r\n    maxPresaleMints,\r\n  } = props\r\n  const [amount, setAmount] = useState(1)\r\n\r\n  useEffect(() => {\r\n    if (presaleStatus) {\r\n      setAmount(3)\r\n    } else {\r\n      setAmount(0)\r\n    }\r\n  }, [presaleStatus, publicSaleStatus])\r\n\r\n\r\n  const increaseAmount = () => {\r\n    if (presaleStatus) {\r\n      if (amount < maxPresaleMints) setAmount(amount + 1)\r\n    }\r\n    if (publicSaleStatus) {\r\n      if (amount < 50) setAmount(amount + 1)\r\n    }\r\n    if (!presaleStatus && !publicSaleStatus) {\r\n      setAmount(0)\r\n    }\r\n  }\r\n\r\n  const decreaseAmount = () => {\r\n    if (amount > 1) setAmount(amount - 1)\r\n  }\r\n\r\n  const handleMint = async () => {\r\n    // let curTime = new Date().getTime()\r\n\r\n    if (!walletAddress) {\r\n      setStatus('Please connect your wallet!')\r\n      return\r\n    }\r\n\r\n    const contract = getContract(walletAddress);\r\n    setMintLoading(true);\r\n\r\n    let cn = await contract.balanceOf(walletAddress);\r\n    let nmint = parseInt(cn._hex, 16);\r\n    console.log(\"walletaddress\",walletAddress);\r\n    console.log(\"mintNum\", nmint);\r\n\r\n    try {\r\n      console.log(\"public sale price\");\r\n      let tx = await contract.mint(amount, {\r\n        value: BigNumber.from(publicSalePrice).mul(amount),\r\n      })\r\n      let res = await tx.wait()\r\n      console.log('mint res', res)\r\n      if (res.transactionHash) {\r\n        setStatus(`You minted ${amount} SON Successfully`)\r\n        setMintLoading(false)\r\n      }\r\n    } catch (err) {\r\n      console.log('mint error', err)\r\n      let errorContainer =\r\n        err.error && err.error.message ? err.error.message : ''\r\n      let errorBody = errorContainer.substr(errorContainer.indexOf(':') + 1)\r\n      let status =\r\n        'Transaction failed because you have insufficient funds or sales not started'\r\n      errorContainer.indexOf('execution reverted') === -1\r\n        ? setStatus(status)\r\n        : setStatus(errorBody)\r\n      setMintLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"mint-page-panel\">\r\n      <img className=\"left-bar\" src=\"img/mint-monkey.gif\" alt=\"Header\" />\r\n      <h3>Amount to mint</h3>\r\n      <h2 style={{ margin: '0' }}>\r\n        {totalSupply} / {maxMintSupply}{' '}\r\n      </h2>\r\n\r\n      <div className=\"btn-group\">\r\n        <button className=\"left\" onClick={decreaseAmount}>\r\n          <svg\r\n            width=\"16\"\r\n            height=\"17\"\r\n            viewBox=\"0 0 16 17\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              d=\"M10.0002 13.5303L5.65355 9.18367C5.14022 8.67034 5.14022 7.83034 5.65355 7.317L10.0002 2.97034\"\r\n              stroke=\"#E5E5E5\"\r\n              strokeWidth=\"1.5\"\r\n              strokeMiterlimit=\"10\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n            />\r\n          </svg>\r\n        </button>\r\n        <div>{amount}</div>\r\n        <button className=\"right\" onClick={increaseAmount}>\r\n          <svg\r\n            width=\"16\"\r\n            height=\"17\"\r\n            viewBox=\"0 0 16 17\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              d=\"M5.99978 13.5303L10.3464 9.18367C10.8598 8.67034 10.8598 7.83034 10.3464 7.317L5.99978 2.97034\"\r\n              stroke=\"#E5E5E5\"\r\n              strokeWidth=\"1.5\"\r\n              strokeMiterlimit=\"10\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n            />\r\n          </svg>\r\n        </button>\r\n      </div>\r\n      {loading ? (\r\n        <button className=\"mint-btn\" disabled={false}>\r\n          {' '}\r\n          MINTING{' '}\r\n        </button>\r\n      ) : (\r\n        <button className=\"mint-btn\" onClick={handleMint} disabled={false}>\r\n          {' '}\r\n          MINT{' '}\r\n        </button>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { BigNumber } from 'ethers'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\nimport { Header } from '../components/header'\r\nimport { Mint } from '../components/mint'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport {\r\n  connectWallet,\r\n  getCurrentWalletConnected,\r\n  getContract,\r\n} from '../utils/interact'\r\n\r\nconst Home = () => {\r\n  const [walletAddress, setWalletAddress] = useState('')\r\n  const [status, setStatus] = useState('')\r\n  const [loading, setMintLoading] = useState(false)\r\n  //const [presalePrice, setPresalePrice] = useState('')\r\n  const [publicSalePrice, setPublicSalePrice] = useState('')\r\n  const [totalSupply, setTotalSupply] = useState(0)\r\n  const [presaleStatus, setPresaleStatus] = useState(false)\r\n  const [publicSaleStatus, setPublicSaleStatus] = useState(false)\r\n  const [maxMintSupply, setMaxMintSupply] = useState(0)\r\n  const [maxPresaleMints, setMaxPresaleMints] = useState(0)\r\n\r\n  useEffect(() => {\r\n    async function fetchWalletInfo() {\r\n      const { address, status } = await getCurrentWalletConnected()\r\n      setWalletAddress(address)\r\n      setStatus(status)\r\n    }\r\n    fetchWalletInfo()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    async function fetchContractInfo() {\r\n      let contract = getContract(walletAddress)\r\n      setPresaleStatus(await contract.isPresaleActive())\r\n      setPublicSaleStatus(await contract.isPublicSaleActive())\r\n      setMaxMintSupply(Number(await contract.MAX_SUPPLY()))\r\n      setMaxPresaleMints(Number(await contract.MAX_PRESALE_MINTS()))\r\n      setTotalSupply(BigNumber.from(await contract.totalSupply()).toNumber()) // original value * 1e5\r\n      //setPresalePrice(BigNumber.from(await contract.PRESALE_PRICE()).toString())\r\n      setPublicSalePrice(\r\n        BigNumber.from(await contract.PUBLIC_PRICE()).toString(),\r\n      )\r\n    }\r\n    fetchContractInfo()\r\n  }, [loading, walletAddress])\r\n\r\n  useEffect(() => {\r\n    if (status) {\r\n      notify()\r\n      setStatus(null)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [status])\r\n\r\n  const onClickConnectWallet = async () => {\r\n    const walletResponse = await connectWallet()\r\n    setStatus(walletResponse.status)\r\n    setWalletAddress(walletResponse.address)\r\n  }\r\n\r\n  const onClickDisconnectWallet = async () => {\r\n    setWalletAddress(null)\r\n  }\r\n\r\n  const notify = () =>\r\n    toast.info(status, {\r\n      position: 'top-right',\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n    })\r\n\r\n  return (\r\n    <div className=\"mint-page\">\r\n      <Header\r\n        onClickDisconnectWallet={onClickDisconnectWallet}\r\n        onClickConnectWallet={onClickConnectWallet}\r\n        walletAddress={walletAddress}\r\n      />\r\n      <Mint\r\n        loading={loading}\r\n        walletAddress={walletAddress}\r\n        setStatus={setStatus}\r\n        setMintLoading={setMintLoading}\r\n        publicSalePrice={publicSalePrice}\r\n        presaleStatus={presaleStatus}\r\n        publicSaleStatus={publicSaleStatus}\r\n        totalSupply={totalSupply}\r\n        maxMintSupply={maxMintSupply}\r\n        maxPresaleMints={maxPresaleMints}\r\n      />\r\n      <ToastContainer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\nimport './App.css'\nimport Home from './containers/home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}